import chalk from 'chalk';
import { ChatGPTAPI } from 'chatgpt';
import { readFile, writeFile } from 'fs/promises';
import { join } from 'path';
import spaceTrim from 'spacetrim';
import { INITIAL_SHEM_MESSAGE_TEXT, OPENAI_API_KEY } from '../../config';

const thread = new ChatGptResponse({
    temperature: 0.5,
    top_p: 0.8,
});

const response = thread.ask('Hello');

export const chatGptApi = new ChatGPTAPI({
    apiKey: OPENAI_API_KEY!,
    completionParams: {
        temperature: 0.5,
        top_p: 0.8,
    },
});

export class ChatGptThread {
    constructor(readonly ChatGPTAPIOptions, readonly respondingTo: ChatGptResponse) {}

    public async ask(message: string): ChatGptResponse {
        const messageCached = await readFile(join(process.cwd(), 'chat/message.md'), 'utf8').catch(() => null);

        if (messageCached) {
            return messageCached.match(/<!--\s*(?<messageId>.*)\s*-->/)!.groups!.messageId;
        }

        console.info(chalk.gray(INITIAL_SHEM_MESSAGE_TEXT));
        const gptResponse = await chatGptApi.sendMessage(
            INITIAL_SHEM_MESSAGE_TEXT /*{ stream: true } <- !!! Play with */,
        );

        console.info(gptResponse);
        console.info(chalk.magenta(gptResponse.text));

        await writeFile(
            join(process.cwd(), 'chat/message.md'),
            spaceTrim(
                (block) => `

                    ${block(INITIAL_SHEM_MESSAGE_TEXT)}

                    ---

                    <!-- ${gptResponse.id} -->

                    ${block(gptResponse.text)}

                `,
            ),
        );

        return gptResponse.id;
    }
}

/**
 * TODO: Maybe as separate lib
 * TODO: [ðŸ“‚] Implement full folder,hierarchical cache
 * TODO: Make separate testing script
 */
