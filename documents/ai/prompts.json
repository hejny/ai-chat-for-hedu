[
    {
        "requestText": "Write JSDoc annotations for TypeScript code:\n\n\n\n\n\n\ninterface Prombservable<T> {\n    asObservable(): Observable<T>;\n    asPromise(): Promise<T>;\n    asCurrentValue(): null | T;\n}\n\nclass ChatMessage {\n    \n\n    constructor(\n        \n        public readonly parentMessage: null | ChatMessage,\n        public readonly from: 'TEACHER' | 'JOURNAL',\n        private readonly contentAsObservable: Observable<string >,\n    ) {\n        \n        const self = this;\n        this.contentLastValue = null;\n        this.contentAsPromise = new Promise((resolve, reject) => {\n            \n            contentAsObservable.subscribe({\n                next(value) {\n                    self.contentLastValue = value;\n                },\n                complete() {\n                    if (self.contentLastValue === null) {\n                        reject(new Error(`Content must contain at least one value before complete`));\n                    } else {\n                        resolve(self.contentLastValue);\n                    }\n                },\n                error(error) {\n                    reject(error);\n                },\n            });\n        });\n    }\n\n    public get content(): Prombservable<string> & { asBoolean(): Promise<boolean> } {\n        const self = this;\n        return {\n            asObservable() {\n                return self.contentAsObservable;\n            },\n            asPromise(): Promise<string> {\n                return self.contentAsPromise;\n            },\n            asCurrentValue(): null | string {\n                return self.contentLastValue;\n            },\n            async asBoolean(): Promise<boolean> {\n                return Math.random() > 0.5 ;\n            },\n        };\n    }\n\n    private contentLastValue: null | string;\n    private contentAsPromise: Promise<string>;\n}\n\ninterface ScenarioUtils {\n    \n\n    \n    say(message: ChatMessage | string): Promise<void>;\n\n    \n    ask(message: ChatMessage | string): ChatMessage;\n\n    \n    rewrite(message: ChatMessage | string): ChatMessage;\n\n    \n    summarize(message: ChatMessage | string): ChatMessage;\n\n    \n    load(\n        ...keys: Array<string>\n    ): Promise<\n        Record<string, ChatMessage | null> \n    >;\n\n    \n    save(messages: Record<string, ChatMessage>): Promise<void>;\n}\n\ninterface Scenario {\n    (utils: ScenarioUtils): Promise<ChatMessage>;\n}\n\nfunction toChatMessage(chatMessage: ChatMessage | string): ChatMessage {\n    if (typeof chatMessage === 'string') {\n        return stringToChatMessage(chatMessage);\n    } else {\n        return chatMessage;\n    }\n}\n\nfunction stringToChatMessage(chatMessageContent: string): ChatMessage {\n    return new ChatMessage(\n        null ,\n        'JOURNAL',\n        new Observable((subscriber) => {\n            subscriber.next(chatMessageContent);\n            subscriber.complete();\n        }),\n    );\n}\n\n\n",
        "responseText": "Here are the JSDoc annotations for the TypeScript code you provided:\n\n/**\n * Interface representing a value that can be observed as an Observable,\n * returned as a Promise or accessed as the current value.\n */\ninterface Prombservable<T> {\n  /**\n   * Returns an Observable representation of the value.\n   */\n  asObservable(): Observable<T>;\n  /**\n   * Returns a Promise representation of the value.\n   */\n  asPromise(): Promise<T>;\n  /**\n   * Returns the current value of the Prombservable.\n   */\n  asCurrentValue(): null | T;\n}\n\n/**\n * Class representing a chat message.\n */\nclass ChatMessage {\n  /**\n   * The parent message of this chat message, if any.\n   */\n  public readonly parentMessage: null | ChatMessage;\n  /**\n   * The sender of this chat message.\n   */\n  public readonly from: 'TEACHER' | 'JOURNAL';\n  /**\n   * The content of this chat message as an Observable.\n   */\n  private readonly contentAsObservable: Observable<string>;\n  /**\n   * The last value emitted by the content Observable.\n   */\n  private contentLastValue: null | string;\n  /**\n   * A Promise representation of the content of this chat message.\n   */\n  private contentAsPromise: Promise<string>;\n\n  /**\n   * Creates a new ChatMessage instance.\n   *\n   * @param parentMessage - The parent message of this chat message, if any.\n   * @param from - The sender of this chat message.\n   * @param contentAsObservable - The content of this chat message as an Observable.\n   */\n  constructor(\n    parentMessage: null | ChatMessage,\n    from: 'TEACHER' | 'JOURNAL',\n    contentAsObservable: Observable<string>\n  ) {\n    const self = this;\n    this.parentMessage = parentMessage;\n    this.from = from;\n    this.contentAsObservable = contentAsObservable;\n    this.contentLastValue = null;\n    this.contentAsPromise = new Promise((resolve, reject) => {\n      contentAsObservable.subscribe({\n        next(value) {\n          self.contentLastValue = value;\n        },\n        complete() {\n          if (self.contentLastValue === null) {\n            reject(new Error(`Content must contain at least one value before complete`));\n          } else {\n            resolve(self.contentLastValue);\n          }\n        },\n        error(error) {\n          reject(error);\n        },\n      });\n    });\n  }\n\n  /**\n   * Returns a Prombservable representation of the content of this chat message,\n   * with an additional method to return a boolean representation of the content.\n   */\n  public get content(): Prombservable<string> & { asBoolean(): Promise<boolean> } {\n    const self = this;\n    return {\n      asObservable() {\n        return self.contentAsObservable;\n      },\n      asPromise(): Promise<string> {\n        return self.contentAsPromise;\n      },\n      asCurrentValue(): null | string {\n        return self.contentLastValue;\n      },\n      async asBoolean(): Promise<boolean> {\n        return Math.random() > 0.5;\n      },\n    };\n  }\n}\n\n/**\n * Interface representing utility methods for use in a Scenario.\n */\ninterface ScenarioUtils {\n  /**\n   * Sends a chat message or string and returns a Promise that resolves when\n   * the message has been sent.\n   *\n   * @param message - The chat message or string to send.\n   */\n  say(message: ChatMessage | string): Promise<void>;\n",
        "responseHtml": "\n    <div class=\"content\" aria-hidden=\"true\" tabindex=\"0\">\n      <div class=\"ac-container ac-adaptiveCard\" style=\"\"><div class=\"ac-textBlock\" style=\"\"><p>Here are the JSDoc annotations for the TypeScript code you provided:</p>\n<pre><code class=\"language-typescript\"><span class=\"hljs-comment\">/**\n * Interface representing a value that can be observed as an Observable,\n * returned as a Promise or accessed as the current value.\n */</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Prombservable</span>&lt;T&gt; {\n  <span class=\"hljs-comment\">/**\n   * Returns an Observable representation of the value.\n   */</span>\n  <span class=\"hljs-title function_\">asObservable</span>(): <span class=\"hljs-title class_\">Observable</span>&lt;T&gt;;\n  <span class=\"hljs-comment\">/**\n   * Returns a Promise representation of the value.\n   */</span>\n  <span class=\"hljs-title function_\">asPromise</span>(): <span class=\"hljs-title class_\">Promise</span>&lt;T&gt;;\n  <span class=\"hljs-comment\">/**\n   * Returns the current value of the Prombservable.\n   */</span>\n  <span class=\"hljs-title function_\">asCurrentValue</span>(): <span class=\"hljs-literal\">null</span> | T;\n}\n\n<span class=\"hljs-comment\">/**\n * Class representing a chat message.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ChatMessage</span> {\n  <span class=\"hljs-comment\">/**\n   * The parent message of this chat message, if any.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-attr\">parentMessage</span>: <span class=\"hljs-literal\">null</span> | <span class=\"hljs-title class_\">ChatMessage</span>;\n  <span class=\"hljs-comment\">/**\n   * The sender of this chat message.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-attr\">from</span>: <span class=\"hljs-string\">'TEACHER'</span> | <span class=\"hljs-string\">'JOURNAL'</span>;\n  <span class=\"hljs-comment\">/**\n   * The content of this chat message as an Observable.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> <span class=\"hljs-attr\">contentAsObservable</span>: <span class=\"hljs-title class_\">Observable</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;;\n  <span class=\"hljs-comment\">/**\n   * The last value emitted by the content Observable.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">contentLastValue</span>: <span class=\"hljs-literal\">null</span> | <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-comment\">/**\n   * A Promise representation of the content of this chat message.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-attr\">contentAsPromise</span>: <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;;\n\n  <span class=\"hljs-comment\">/**\n   * Creates a new ChatMessage instance.\n   *\n   * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">parentMessage</span> - The parent message of this chat message, if any.\n   * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">from</span> - The sender of this chat message.\n   * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">contentAsObservable</span> - The content of this chat message as an Observable.\n   */</span>\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">\n    parentMessage: <span class=\"hljs-literal\">null</span> | ChatMessage,\n    <span class=\"hljs-keyword\">from</span>: <span class=\"hljs-string\">'TEACHER'</span> | <span class=\"hljs-string\">'JOURNAL'</span>,\n    contentAsObservable: Observable&lt;<span class=\"hljs-built_in\">string</span>&gt;\n  </span>) {\n    <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-variable language_\">this</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">parentMessage</span> = parentMessage;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">from</span> = <span class=\"hljs-keyword\">from</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">contentAsObservable</span> = contentAsObservable;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">contentLastValue</span> = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">contentAsPromise</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      contentAsObservable.<span class=\"hljs-title function_\">subscribe</span>({\n        <span class=\"hljs-title function_\">next</span>(<span class=\"hljs-params\">value</span>) {\n          self.<span class=\"hljs-property\">contentLastValue</span> = value;\n        },\n        <span class=\"hljs-title function_\">complete</span>(<span class=\"hljs-params\"></span>) {\n          <span class=\"hljs-keyword\">if</span> (self.<span class=\"hljs-property\">contentLastValue</span> === <span class=\"hljs-literal\">null</span>) {\n            <span class=\"hljs-title function_\">reject</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`Content must contain at least one value before complete`</span>));\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-title function_\">resolve</span>(self.<span class=\"hljs-property\">contentLastValue</span>);\n          }\n        },\n        <span class=\"hljs-title function_\">error</span>(<span class=\"hljs-params\">error</span>) {\n          <span class=\"hljs-title function_\">reject</span>(error);\n        },\n      });\n    });\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Returns a Prombservable representation of the content of this chat message,\n   * with an additional method to return a boolean representation of the content.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">content</span>(): <span class=\"hljs-title class_\">Prombservable</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; &amp; { <span class=\"hljs-title function_\">asBoolean</span>(): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">boolean</span>&gt; } {\n    <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-variable language_\">this</span>;\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-title function_\">asObservable</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">contentAsObservable</span>;\n      },\n      <span class=\"hljs-title function_\">asPromise</span>(): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; {\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">contentAsPromise</span>;\n      },\n      <span class=\"hljs-title function_\">asCurrentValue</span>(): <span class=\"hljs-literal\">null</span> | <span class=\"hljs-built_in\">string</span> {\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-property\">contentLastValue</span>;\n      },\n      <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">asBoolean</span>(): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">boolean</span>&gt; {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() &gt; <span class=\"hljs-number\">0.5</span>;\n      },\n    };\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * Interface representing utility methods for use in a Scenario.\n */</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">ScenarioUtils</span> {\n  <span class=\"hljs-comment\">/**\n   * Sends a chat message or string and returns a Promise that resolves when\n   * the message has been sent.\n   *\n   * <span class=\"hljs-doctag\">@param</span> <span class=\"hljs-variable\">message</span> - The chat message or string to send.\n   */</span>\n  <span class=\"hljs-title function_\">say</span>(<span class=\"hljs-attr\">message</span>: <span class=\"hljs-title class_\">ChatMessage</span> | <span class=\"hljs-built_in\">string</span>): <span class=\"hljs-title class_\">Promise</span>&lt;<span class=\"hljs-built_in\">void</span>&gt;;\n</code></pre>\n</div></div>\n    </div>\n  ",
        "metadataText": "@see ChatBing from Sat Apr 08 2023"
    }
]
